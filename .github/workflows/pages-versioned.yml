name: Publish versioned docs to Pages

on:
  push:
    branches: [ main ]         # updates /latest
  push:
    tags:
      - 'v*'                   # e.g., v1.0, v2.1 -> updates /v1.0, /v2.1

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Decide which version folder to publish to
      - name: Set version env
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi

      # Your "build" step (if you have one). If not, just copy files.
      - name: Prepare site files
        run: |
          rm -rf site && mkdir -p site
          # Copy the markdown and assets you want to publish
          rsync -a --delete \
            --exclude '.git' --exclude '.github' \
            --exclude 'README.md' \
            ./ site/

      # Pull the current versions_branch branch so we can keep older versions
      - name: Checkout versions_branch
        uses: actions/checkout@v4
        with:
          ref: versions_branch
          path: ghp
          fetch-depth: 0

      - name: Ensure versions_branch tree exists
        run: |
          mkdir -p ghp
          # Create root landing page assets if first time
          [[ -f ghp/index.html ]] || cat > ghp/index.html <<'HTML'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8"/>
            <meta name="viewport" content="width=device-width,initial-scale=1"/>
            <title>SOP-WI â€“ Versions</title>
            <style>
              body{display:flex;margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,"Helvetica Neue",Arial}
              aside{width:280px;padding:1rem;border-right:1px solid #ddd;min-height:100vh;box-sizing:border-box}
              main{padding:1rem}
              select{width:100%;padding:.5rem}
              .hint{color:#555;font-size:.9rem;margin:.5rem 0 0}
              a{color:#0366d6;text-decoration:none}
            </style>
          </head>
          <body>
            <aside>
              <h2>SOP-WI</h2>
              <label>Choose a version</label>
              <select id="ver"></select>
              <p class="hint">Tip: <a id="latestLink" href="#">open latest</a></p>
            </aside>
            <main>
              <h1>Versioned documentation</h1>
              <p>Select a version at left to view that snapshot of the docs.</p>
            </main>
            <script>
              (async function(){
                const base = location.pathname.replace(/\\/$/, '');
                // e.g., "/SOP-WI" for project pages
                const basePath = base.split('/').slice(0,3).join('/');
                const resp = await fetch(basePath + '/versions.json', {cache:'no-store'});
                const data = await resp.json();
                const sel = document.getElementById('ver');
                data.versions.forEach(v => {
                  const opt = document.createElement('option');
                  opt.value = v;
                  opt.textContent = v === 'latest' ? 'latest (main)' : v;
                  sel.appendChild(opt);
                });
                sel.value = data.default || 'latest';
                sel.onchange = () => location.href = basePath + '/' + sel.value + '/';
                document.getElementById('latestLink').href = basePath + '/latest/';
              }());
            </script>
          </body>
          </html>
          HTML

          # Create versions.json if missing
          [[ -f ghp/versions.json ]] || echo '{"default":"latest","versions":["latest"]}' > ghp/versions.json

      # Copy the built site into the version folder (e.g., /v2.0/ or /latest/)
      - name: Copy site into version folder
        run: |
          mkdir -p "ghp/${VERSION}"
          rsync -a --delete site/ "ghp/${VERSION}/"

      # Update versions.json list (keeps unique, sorted-like order with latest first)
      - name: Update versions.json
        run: |
          cd ghp
          jq --arg v "$VERSION" '
            .versions as $vs
            | ($vs + [$v]) | unique
            | {default: "latest", versions: .}
          ' versions.json > versions.new.json || echo '{"default":"latest","versions":["latest","'"$VERSION"'"]}' > versions.new.json
          mv versions.new.json versions.json

      - name: Commit and push to versions_branch
        run: |
          cd ghp
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Publish ${VERSION} [skip ci]" || echo "No changes"
          git push origin versions_branch
